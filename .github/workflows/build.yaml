name: build
run-name: build
on: [push]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-rpm:
    runs-on: ubuntu-latest
    container:
      image: docker.io/library/fedora:40
      options: --privileged
    steps:
    - name: install dependencies
      run: dnf install -y git mock rpm-build rpmdevtools
    - name: checkout
      uses: actions/checkout@v4
    - name: checkout mesa
      run: git clone --depth=1 https://gitlab.freedesktop.org/mesa/mesa.git
    - name: create rpm sources
      run: >
        mkdir -p ${HOME}/rpmbuild/SOURCES/ &&
        tar -czf ${HOME}/rpmbuild/SOURCES/mesa.tar.gz mesa &&
        cp Mesa-MLAA-License-Clarification-Email.txt ${HOME}/rpmbuild/SOURCES/ &&
        cp gnome-shell-glthread-disable.patch ${HOME}/rpmbuild/SOURCES/ &&
        cp valve.patch ${HOME}/rpmbuild/SOURCES/
    - name: export version vars
      run: >
        echo "MESA_VERSION=$(cat ./mesa/VERSION)" >> "$GITHUB_ENV" &&
        echo "MESA_GIT_SHA=$(GIT_DIR=./mesa/.git git rev-parse --short HEAD)" >> "$GITHUB_ENV"
    - name: build srpm
      run: rpmbuild -bs --define="ver ${MESA_VERSION}" --define="commitsha ${MESA_GIT_SHA}" mesa.spec
    - name: build i386
      run: >
        find ${HOME}/rpmbuild/SRPMS/ -type f -name "*.src.rpm" -exec
        sh -c 'mock -r fedora-40-i386 --resultdir ${HOME}/rpmbuild/RPMS --rebuild {}' \;
    - name: build x86_64
      run: >
        find ${HOME}/rpmbuild/SRPMS/ -type f -name "*.src.rpm" -exec
        sh -c 'mock -r fedora-40-x86_64 --resultdir ${HOME}/rpmbuild/RPMS --rebuild {}' \;
    - name: save artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rpms
        path: ${HOME}/rpmbuild/RPMS

  build-image:
    runs-on: ubuntu-latest
    needs:
    - build-rpm
    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: restore artifacts
      uses: actions/download-artifact@v4
      with:
        name: rpms
    - name: build
      run: >
        mv ${HOME}/rpmbuild/RPMS RPMS &&
        buildah build
        -f Containerfile
        --platform=linux/amd64
        -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        .
    - name: save image
      run: podman save --format=oci-archive ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest > image
    - name: save artifacts
      uses: actions/upload-artifact@v4
      with:
        name: image
        path: image

  push-image:
    if: github.ref_name == main
    runs-on: ubuntu-latest
    needs:
    - build-image
    permissions:
      contents: read
      packages: write
      attestations: write
    steps:
    - name: ghcr login
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: restore artifacts
      uses: actions/download-artifact@v4
      with:
        name: image
    - name: load image
      run: podman load -i image
    - name: push image
      run: podman push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
